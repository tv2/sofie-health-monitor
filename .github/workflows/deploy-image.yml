name: Create and publish a package
on:
  push:
    branches: ['master']
jobs:
  run-npm-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: npm install and build
        run: |
          npm install
          npm run build
      - uses: actions/upload-artifact@main
        with:
          name: client artifacts
          path: client/dist
      - uses: actions/upload-artifact@main
        with:
          name: server artifacts
          path: server/dist

  run-npm-test:
    runs-on: ubuntu-latest
    needs: run-npm-build
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [16.x]
    steps: 
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/download-artifact@main
        with:
          name: client artifacts
          path: client/dist
      - uses: actions/download-artifact@main
        with:
          name: server artifacts
          path: server/dist
      - name: npm install
        run: |
          npm install
        env:
          CI: true

  build-and-push-image:
    runs-on: ubuntu-latest
    needs: run-npm-test 
    permissions: 
      contents: read
      packages: write 
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get standard version
        uses: oprypin/find-latest-tag@v1
        with:
          repository: ${{ github.repository }}
        id: version

      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            tv2media/${{ github.event.repository.name }}:${{ steps.version.outputs.tag }}
            tv2media/${{ github.event.repository.name }}:latest

  deploy-new-image:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    steps:
      - name: Deploy 
        id: deploymentRequest
        uses: fjogeleit/http-request-action@master
        with:
          url: "https://${{ secrets.DEPLOYMENT_API_URL }}/production"
          method: 'POST'
          username: ${{ secrets.DEPLOYMENT_USERNAME }}
          password: ${{ secrets.DEPLOYMENT_PASSWORD }}
          data: "{\"target\":\"${{ secrets.DEPLOYMENT_TARGET }}\"}"

      - name: Show Deployment Response
        run: echo ${{ steps.deploymentRequest.outputs.response }}
